import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.DkZrsx35.js";const m=JSON.parse('{"title":"元素面板介绍","description":"","frontmatter":{},"headers":[],"relativePath":"devtools/elements.md","filePath":"devtools/elements.md"}'),n={name:"devtools/elements.md"},l=e(`<h1 id="元素面板介绍" tabindex="-1">元素面板介绍 <a class="header-anchor" href="#元素面板介绍" aria-label="Permalink to &quot;元素面板介绍&quot;">​</a></h1><h2 id="存储为全局变量" tabindex="-1">存储为全局变量 <a class="header-anchor" href="#存储为全局变量" aria-label="Permalink to &quot;存储为全局变量&quot;">​</a></h2><p>右键点击 DOM 节点，选择 Store as global variable 即可。 在控制台中输入 temp1，然后按 Enter 键。表达式的结果 表示该变量的求值结果是该节点。</p><h2 id="自动化测试中引用节点" tabindex="-1">自动化测试中引用节点 <a class="header-anchor" href="#自动化测试中引用节点" aria-label="Permalink to &quot;自动化测试中引用节点&quot;">​</a></h2><p>右键点击 DOM 树中的节点，然后选择 复制 &gt;复制 JS 路径。document.querySelector() 表达式可解析为 该节点已复制到剪贴板</p><h2 id="dom-节点对应的属性" tabindex="-1">DOM 节点对应的属性 <a class="header-anchor" href="#dom-节点对应的属性" aria-label="Permalink to &quot;DOM 节点对应的属性&quot;">​</a></h2><ul><li>以粗体显示的属性是对象自身的属性</li><li>以常规字体的属性继承自原型链</li><li>可枚举属性的颜色是明亮的。非枚举属性浅色。</li></ul><h2 id="编辑-cssom-函数定义的样式规则" tabindex="-1">编辑 CSSOM 函数定义的样式规则 <a class="header-anchor" href="#编辑-cssom-函数定义的样式规则" aria-label="Permalink to &quot;编辑 CSSOM 函数定义的样式规则&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sheet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CSSStyleSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sheet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`h1 {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    background: pink;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    text-transform: uppercase;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.adoptedStyleSheets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [sheet];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="dom-断点" tabindex="-1">DOM 断点 <a class="header-anchor" href="#dom-断点" aria-label="Permalink to &quot;DOM 断点&quot;">​</a></h2><p>选择 DOM 节点，然后选择“添加 DOM 断点”选项。</p><h2 id="样式编辑器" tabindex="-1">样式编辑器 <a class="header-anchor" href="#样式编辑器" aria-label="Permalink to &quot;样式编辑器&quot;">​</a></h2><p>在样式编辑器中，您可以查看和修改 CSS 规则。</p><h2 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h2><p>网格叠加层</p>`,15),t=[l];function h(r,p,d,o,k,c){return i(),a("div",null,t)}const b=s(n,[["render",h]]);export{m as __pageData,b as default};
